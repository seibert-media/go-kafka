// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/Shopify/sarama"
	"github.com/boltdb/bolt"
	"github.com/seibert-media/go-kafka/persistent"
)

type PersistentMessageHandler struct {
	HandleMessageStub        func(*bolt.Tx, *sarama.ConsumerMessage) error
	handleMessageMutex       sync.RWMutex
	handleMessageArgsForCall []struct {
		arg1 *bolt.Tx
		arg2 *sarama.ConsumerMessage
	}
	handleMessageReturns struct {
		result1 error
	}
	handleMessageReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PersistentMessageHandler) HandleMessage(arg1 *bolt.Tx, arg2 *sarama.ConsumerMessage) error {
	fake.handleMessageMutex.Lock()
	ret, specificReturn := fake.handleMessageReturnsOnCall[len(fake.handleMessageArgsForCall)]
	fake.handleMessageArgsForCall = append(fake.handleMessageArgsForCall, struct {
		arg1 *bolt.Tx
		arg2 *sarama.ConsumerMessage
	}{arg1, arg2})
	fake.recordInvocation("HandleMessage", []interface{}{arg1, arg2})
	fake.handleMessageMutex.Unlock()
	if fake.HandleMessageStub != nil {
		return fake.HandleMessageStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.handleMessageReturns
	return fakeReturns.result1
}

func (fake *PersistentMessageHandler) HandleMessageCallCount() int {
	fake.handleMessageMutex.RLock()
	defer fake.handleMessageMutex.RUnlock()
	return len(fake.handleMessageArgsForCall)
}

func (fake *PersistentMessageHandler) HandleMessageCalls(stub func(*bolt.Tx, *sarama.ConsumerMessage) error) {
	fake.handleMessageMutex.Lock()
	defer fake.handleMessageMutex.Unlock()
	fake.HandleMessageStub = stub
}

func (fake *PersistentMessageHandler) HandleMessageArgsForCall(i int) (*bolt.Tx, *sarama.ConsumerMessage) {
	fake.handleMessageMutex.RLock()
	defer fake.handleMessageMutex.RUnlock()
	argsForCall := fake.handleMessageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *PersistentMessageHandler) HandleMessageReturns(result1 error) {
	fake.handleMessageMutex.Lock()
	defer fake.handleMessageMutex.Unlock()
	fake.HandleMessageStub = nil
	fake.handleMessageReturns = struct {
		result1 error
	}{result1}
}

func (fake *PersistentMessageHandler) HandleMessageReturnsOnCall(i int, result1 error) {
	fake.handleMessageMutex.Lock()
	defer fake.handleMessageMutex.Unlock()
	fake.HandleMessageStub = nil
	if fake.handleMessageReturnsOnCall == nil {
		fake.handleMessageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.handleMessageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *PersistentMessageHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleMessageMutex.RLock()
	defer fake.handleMessageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PersistentMessageHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ persistent.PersistentMessageHandler = new(PersistentMessageHandler)
